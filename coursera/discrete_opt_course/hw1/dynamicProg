#!/usr/bin/python
# -*- coding: utf-8 -*-

from collections import namedtuple
from operator import attrgetter

Item = namedtuple("Item", ['index', 'value', 'weight'])

def parse_data(input_data):
    # parse the input
    lines = input_data.split('\n')

    firstLine = lines[0].split()
    item_count = int(firstLine[0])
    capacity = int(firstLine[1])

    items = []

    for i in range(1, item_count+1):
        line = lines[i]
        parts = line.split()
        items.append(Item(i-1, int(parts[0]), int(parts[1])))
    
    return (capacity, items)

def solve_it_orig(input_data):
    # Modify this code to run your optimization algorithm

    # parse the input
    lines = input_data.split('\n')

    firstLine = lines[0].split()
    item_count = int(firstLine[0])
    capacity = int(firstLine[1])

    items = []

    for i in range(1, item_count+1):
        line = lines[i]
        parts = line.split()
        items.append(Item(i-1, int(parts[0]), int(parts[1])))

    # a trivial greedy algorithm for filling the knapsack
    # it takes items in-order until the knapsack is full
    value = 0
    weight = 0
    taken = [0]*len(items)

    for item in items:
        if weight + item.weight <= capacity:
            taken[item.index] = 1
            value += item.value
            weight += item.weight
    
    # prepare the solution in the specified output format
    output_data = str(value) + ' ' + str(0) + '\n'
    output_data += ' '.join(map(str, taken))
    return output_data

def solve_it(input_data):
    # Modify this code to run your optimization algorithm

    # parse the input
    (capacity, items) = parse_data(input_data)

    # a trivial greedy algorithm for filling the knapsack
    # it takes items in-order until the knapsack is full
#     value = 0
#     weight = 0
#     taken = [0]*len(items)
#     
#     sortedItemList = sorted(items, key=attrgetter('value'), reverse=True)
#     print items
#     print sortedItemList
# 
#     for item in sortedItemList:
#         if weight + item.weight <= capacity:
#             taken[item.index] = 1
#             value += item.value
#             weight += item.weight
#     
#     # prepare the solution in the specified output format
#     output_data = str(value) + ' ' + str(0) + '\n'
#     output_data += ' '.join(map(str, taken))
#     return output_data

#     return solve_via_grabbing_most_valuable_items(capacity, items)
    return solve_via_grabbing_most_useful_items(capacity, items)




def solve_via_grabbing_most_valuable_items(capacity, items):
    value = 0
    weight = 0
    taken = [0]*len(items)
    
    sortedItemList = sorted(items, key=attrgetter('value'), reverse=True)
    print items
    print sortedItemList

    for item in sortedItemList:
        if weight + item.weight <= capacity:
            taken[item.index] = 1
            value += item.value
            weight += item.weight
    
    # prepare the solution in the specified output format
    output_data = str(value) + ' ' + str(0) + '\n'
    output_data += ' '.join(map(str, taken))

    return output_data

def solve_via_grabbing_most_useful_items(capacity, items):
    value = 0
    weight = 0
    taken = [0]*len(items)
    
    sortedItemList = sorted(items, key= lambda x : x.value/x.weight, reverse=True)
    print items
    print sortedItemList

    for item in sortedItemList:
        if weight + item.weight <= capacity:
            taken[item.index] = 1
            value += item.value
            weight += item.weight
    
    # prepare the solution in the specified output format
    output_data = str(value) + ' ' + str(0) + '\n'
    output_data += ' '.join(map(str, taken))

    return output_data


def solve_via_DP(capacity, items):
    output_data = ""
    return output_data

import sys

if __name__ == '__main__':
        file_location = './data/ks_lecture_dp_2'
        input_data_file = open(file_location, 'r')
        input_data = ''.join(input_data_file.readlines())
        input_data_file.close()
        print "Default"
        print solve_it_orig(input_data)
        print "My soloution"
        print solve_it(input_data)
